import requests
from bs4 import BeautifulSoup
import telegram
import os
import datetime
import sys
from telegram.error import RetryAfter, TimedOut
import time
import logging
from pytz import timezone
import pytz
import configparser
import json
from apscheduler.schedulers.blocking import BlockingScheduler

def telegram_send(message, logger):
    tries = 0
    max_tries = 10
    retry_delay = 10
    while tries < max_tries:
        try:
            _telegram_send(
                #'{}\n\rRe {}'.format(
                '{}'.format(
                    message
                )
            )
        except (RetryAfter, TimedOut) as e:
            logger.error("Message {} got exception {}".format(message, e))
            time.sleep(retry_delay)
            tries += 1
        else:
            break

def _telegram_send(message):
    bot = telegram.Bot(token = my_token)
    bot.send_message(chat_id=my_id, text=message)

def getEmerson(fileName, logger, now1) :
    try:
        if os.path.exists(fileName):
            f = open(fileName,"r",encoding='utf8')
        else:
            f = open(fileName,"x",encoding='utf8')

        currentList = []
        newList = []

        for cl in f:
            currentList.append(cl.lstrip().rstrip())

        f.close()

        response = requests.get("https://ananti.kr/ko/joongang/board/gcJoin")
        soup = BeautifulSoup(response.text,'html.parser')
        numbers = [int(span.get_text(strip=True))-1 for span in soup.select('li span.page-text')]
        string_to_check = ['부부']
        is_string_check = False
        for number in numbers:
            response = requests.get(f"https://ananti.kr/ko/joongang/board/gcJoin?page={number}")
            soup = BeautifulSoup(response.text,'html.parser')
            rows = soup.find_all('tr')
            for row in rows:
                cols = row.find_all('td')
                data = [col.get_text(strip=True) for col in cols]
                is_string_check = False
                if len(data) > 0:
                    # 문자열을 datetime 객체로 변환
                    date_obj = datetime.datetime.strptime(data[1], "%Y-%m-%d")
                    # 요일 가져오기 (0: 월요일, 6: 일요일)
                    weekday_korean = ["월", "화", "수", "목", "금", "토", "일"][date_obj.weekday()]  # 한글 요일 이름
                    if weekday_korean in permitDays and data[3][:3] in arrange_time:
                        content = data[6].replace("\n", " ")
                        for check_str in string_to_check:
                            if check_str in content:
                                is_string_check = True
                                break    
                        if is_string_check:
                            continue
                        else:
                            message = ' '.join([data[1],weekday_korean, data[2],data[3],data[4],data[5],content])
                            newList.append(message.lstrip().rstrip())

        for message in newList:
            if not message in currentList:
                telegram_send(message, logger)
                #break

        f = open(fileName,"w",encoding='utf8')

        for line in newList:
            f.write(line+"\n")

        f.close()

        logger.info("Emerson end")
    except Exception as ex:
        logger.error("getEmerson error",ex)

def getEmersonMemDay(fileName, mdate, logger, now1, URL_Em_Memday,data_Em_Memday):

    try:

        if os.path.exists(fileName):
            f = open(fileName,"r",encoding='utf8')
        else:
            f = open(fileName,"x",encoding='utf8')

        currentList = []

        newList = []

        writeList = []

        for cl in f:
            currentList.append(cl.lstrip().rstrip())
        f.close()

        res = requests.post(URL_Em_Memday, data=data_Em_Memday)

        json_dic = json.loads(res.text)

        array_list = json_dic['rtnData']

        timeStr = ''

        nowstr = datetime.datetime.now().strftime('%Y%m%d')
        #print(f'nowstr:{nowstr}, currentList:{currentList}')

        for old_msg in currentList:
            if mdate not in old_msg:
                datestr = old_msg[-8:]
                if datestr > nowstr:
                    writeList.append(old_msg)

        #print(f'writeList:{writeList}')

        for sen in array_list:
            #print(sen)
            r_time = sen['R_TIME'][:3]
            if '예약가능' in sen['STATUS_DESC'] and r_time in arrange_time:
                message=sen['R_TIME'] + ': ' + sen['COURSE_NAME'] + mdate
                newList.append(message.lstrip().rstrip())

        for message in newList:
            writeList.append(message)
            if not message in currentList:
                #print(f'send {message}')
                telegram_send(message + " opened", logger)

        #print(f'writeList:{writeList}')
        f = open(fileName,"w",encoding='utf8')
        for line in writeList:
            f.write(line+"\n")
        f.close()
        logger.info("Emerson Day end")

    except Exception as ex:
        logger.error("EmersonMemDay error", ex)

def getAceJoin(fileName, logger, now1):

    try:
        if os.path.exists(fileName):
            f = open(fileName,"r",encoding='utf8')
        else:
            f = open(fileName,"x",encoding='utf8')

        currentList = []

        for cl in f:
            currentList.append(cl.lstrip().rstrip())

        f.close()

        # Session 생성, with 구문 안에서 유지
        with requests.Session() as s:
            # HTTP POST request: 로그인을 위해 POST url와 함께 전송될 data를 넣어주자.
            login_req = s.post('https://www.acegolf.com/member/login_ok.php', data=LOGIN_INFO)

            post_one = s.get('http://www.acegolf.com/club/board/list.php?cb_id=1504&gsn=15144')

            post_one.encoding = 'euc-kr'

            soup = BeautifulSoup(post_one.text,'html.parser')

            message = soup.select(
                '#content-area > div.board > table > form > tbody > tr > td.subject > a > span'
            )[0].text.lstrip().rstrip()

            if not message in currentList:
                telegram_send(message, logger)

            f = open(fileName,"w",encoding='utf8')

            f.write(message+"\n")

            f.close()

            logger.info("AceClub end")
    except Exception as ex:
        logger.error("getAceJoin error",ex)


def getCGVIMax(dateStr, fileNameIMax,logger, now1):

    try:

        if os.path.exists(fileNameIMax):
            f = open(fileNameIMax,"r",encoding='utf8')
        else:
            f = open(fileNameIMax,"x",encoding='utf8')

        currentList = []

        newList = []

        for cl in f:
            currentList += cl.lstrip().rstrip().split(' ')

        f.close()

        req = requests.get('http://www.cgv.co.kr/common/showtimes/iframeTheater.aspx?areacode=01&theatercode=0013&date='+dateStr+'&screencodes=&screenratingcode=&regioncode=')

        req.encoding = 'utf-8'

        html = req.text

        soup = BeautifulSoup(html,'html.parser')

        divDay = soup.select(
            'li.on > div.day > a'
        )

        if dateStr not in divDay[0]['href']:
            logger.info("getCGVIMax not date")
            return

        dataList = soup.select(
            'span.screentype > span.imax'
        )

        timeStr = ''

        for dataListSpan in dataList:
            times = dataListSpan.parent.parent.parent.parent.find_next_siblings('div')[0].select('em')
            for t in times:
                timeStr += t.text+' '

        dataList2 = soup.select(
            'div.info-hall > ul > li'
        )

        for room in dataList2:
            if 'IMAX관' in room.text.lstrip().rstrip():
                times = room.parent.parent.find_next_siblings('div')[0].select('em')
                for t in times:
                    timeStr += t.text+' '

        if len(timeStr):
            timeStr = timeStr.lstrip().rstrip()
            newList = timeStr.split(' ')

        for message in newList:
            if not message in currentList:
                telegram_send("IMAX opened in " + dateStr+ " "+timeStr, logger)
                f = open(fileNameIMax,"w",encoding='utf8')
                f.write(timeStr+"\n")
                f.close()
                break

        logger.info("CGVIMax end")

    except Exception as ex:
        logger.error("CGVIMax error",ex)

def getCGV4DX(dateStr, fileName,logger, now1):

    try:

        if os.path.exists(fileName):
            f = open(fileName,"r",encoding='utf8')
        else:
            f = open(fileName,"x",encoding='utf8')

        currentList = []

        newList = []

        for cl in f:
            currentList += cl.lstrip().rstrip().split(' ')

        f.close()
        
        cookie="WMONID=VlzxoPKm_CJ; ASP.NET_SessionId=ehxjys0uxtfpgfk3hpxkvswv; _gid=GA1.3.608136737.1670203881; _ga=GA1.1.66961783.1669191332; CgvCM=XxsrHQneHpnWo/F5WOYLBddxv5ue2NpBk0hnoYeSM0KMXkkRtD6dySvJVLvnscfiue4ISwyK+i3ZNq9GrXGwdNTchR0NuAJXoEzwSUJaeD7dw+fg1h83xgSZhq5bpceGcZQwqyJhaADzCTlfYY0rXbgZhcB3OGT4hdfigrJxHmxkQYIxHpnmiJSae11LKK+89rhfKFHb3RX/Lnm3qRXdy/2RO85p9mBMvxcNgoV86A2HTelMoTS3unjWIh0iUhL8; _ga_559DE9WSKZ=GS1.1.1670203880.5.1.1670203919.21.0.0"

        header={"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","Accept-Encoding": "gzip, deflate","Accept-Language": "ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,zh-TW;q=0.5,zh;q=0.4","Connection": "keep-alive","Cookie": "{cookie}","Host": "www.cgv.co.kr","Referer": f"http://www.cgv.co.kr/common/showtimes/iframeTheater.aspx?areacode=01&theatercode=0013&date={dateStr}&screencodes=&screenratingcode=11&regioncode=4d14","Upgrade-Insecure-Requests": "1","User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"}

        req = requests.get('http://www.cgv.co.kr/common/showtimes/iframeTheater.aspx?areacode=01&theatercode=0013&date='+dateStr+'&screencodes=&screenratingcode=11&regioncode=4d14', headers=header)

        req.encoding = 'utf-8'

        html = req.text
        #print(html)
        soup = BeautifulSoup(html,'html.parser')

        divDay = soup.select(
            'li.on > div.day > a'
        )
        if dateStr not in divDay[0]['href']:
            logger.info("getCGV4DX not date")
            return

        dataList = soup.select(
            'span.screentype > span.forDX'
        )
        #print(soup)
        timeStr = ''

        for dataListSpan in dataList:
            times = dataListSpan.parent.parent.parent.parent.find_next_siblings('div')[0].select('em')
            for t in times:
                timeStr += t.text+' '

        if len(timeStr):
            timeStr = timeStr.lstrip().rstrip()
            newList = timeStr.split(' ')
        #print(timeStr)
        for message in newList:
            if not message in currentList:
                telegram_send("4DX opened in " + dateStr+ " "+timeStr, logger)
                f = open(fileName,"w",encoding='utf8')
                f.write(timeStr+"\n")
                f.close()
                break

        logger.info("CGV4DX end")

    except Exception as ex:
        logger.error("CGV4DX error",ex)


def getCGVMovNum(dateStr, movnum, fileNameCGVMovNum,logger, now1):

    try:

        if os.path.exists(fileNameCGVMovNum):
            f = open(fileNameCGVMovNum,"r",encoding='utf8')
        else:
            f = open(fileNameCGVMovNum,"x",encoding='utf8')

        currentList = []

        newList = []

        for cl in f:
            currentList += cl.lstrip().rstrip().split(' ')
        f.close()

        req = requests.get('http://www.cgv.co.kr/movies/detail-view/?midx='+movnum)
        req.encoding = 'utf-8'
        word = "open"
        result = req.text.find('예매중')
        if(result>0):
           newData = str(movnum)+'_'+str(dateStr)
           newList.append(newData)

        for message in newList:
            if not message in currentList:
                telegram_send("CGV "+ movnum + " opened", logger)
                f = open(fileNameCGVMovNum,"w",encoding='utf8')
                f.write(str(message)+"\n")
                f.close()
                break
        logger.info("CGVMovNum end")

    except Exception as ex:
        logger.error("CGVMovNum error",ex)

def getMegaBoxMx(dateStr, URL_Megabox, data_Mx, fileNameMx,logger, now1):

    try:

        if os.path.exists(fileNameMx):
            f = open(fileNameMx,"r",encoding='utf8')
        else:
            f = open(fileNameMx,"x",encoding='utf8')

        currentList = []

        newList = []

        for cl in f:
            currentList += cl.lstrip().rstrip().split(' ')
        f.close()

        header={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'}
        res = requests.post(URL_Megabox, data=data_Mx, headers=header)
        #print(res.text)

        json_dic = json.loads(res.text)

        array_list = json_dic['megaMap']['movieFormList']

        timeStr = ''
        for sen in array_list:
            if 'Dolby Cinema' in sen['theabEngNm']:
                timeStr += sen['playStartTime']+' '

        if len(timeStr):
            timeStr = timeStr.lstrip().rstrip()
            newList = timeStr.split(' ')

        for message in newList:
            if not message in currentList:
                telegram_send("Dolby Cinema opened in " + dateStr+ " "+timeStr, logger)
                f = open(fileNameMx,"w",encoding='utf8')
                f.write(timeStr+"\n")
                f.close()
                break

        logger.info("MegaBoxMx end")
    except Exception as ex:
        logger.error("MegaBoxMx error", ex)

def getMegaBoxTitle(dateStr, megaTitle, URL_Megabox, data_Title, fileNameMegaBoxTitle,logger, now1):

    try:

        if os.path.exists(fileNameMegaBoxTitle):
            f = open(fileNameMegaBoxTitle,"r",encoding='utf8')
        else:
            f = open(fileNameMegaBoxTitle,"x",encoding='utf8')

        currentList = []

        newList = []

        for cl in f:
            currentList += cl.lstrip().rstrip().split(' ')

        f.close()
        header={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'}
        res = requests.post(URL_Megabox, data=data_Title,headers=header)

        json_dic = json.loads(res.text)

        array_list = json_dic['megaMap']['movieFormList']

        timeStr = ''
        movieTitleFull = megaTitle

        for sen in array_list:
            if megaTitle in sen['movieNm']:
                timeStr += sen['playStartTime']+' '
                movieTitleFull = sen['movieNm']

        if len(timeStr):
            timeStr = timeStr.lstrip().rstrip()
            newList = timeStr.split(' ')

        for message in newList:
            if not message in currentList:
                telegram_send("MEGABOX " + movieTitleFull + " opened in " + dateStr+ " "+timeStr, logger)
                f = open(fileNameMegaBoxTitle,"w",encoding='utf8')
                f.write(timeStr+"\n")
                f.close()
                break

        logger.info("MegaBoxTitle end")
    except Exception as ex:
        logger.error("MegaBoxTitle error", ex)

def getMarket(fileName, mTitle, logger, now1) :
    try:
        if os.path.exists(fileName):
            f = open(fileName,"r",encoding='utf8')
        else:
            f = open(fileName,"x",encoding='utf8')

        currentList = []
        newList = []
        sendMsg = ''

        for cl in f:
            currentList.append(cl.lstrip().rstrip())

        f.close()

        req = requests.get('https://www.clien.net/service/search/board/jirum?sk=title&sv='+mTitle)

        req.encoding = 'utf-8'

        html = req.text

        soup = BeautifulSoup(html,'html.parser')

        titleElements = soup.select(
            '#div_content > div > div > div > div > span.list_subject'
        )

        dateElements = soup.select(
            '#div_content > div > div > div > div > span > span.timestamp'
        )

        size = len(titleElements)

        for i in range(size):
            newList.append(titleElements[i]['title'] + ' ' + dateElements[i].text)

        for message in newList:
            if not message in currentList and "품절" not in message:
                sendMsg += message+'\n'

        if(len(sendMsg) > 0):
            telegram_send(sendMsg, logger)

        f = open(fileName,"w",encoding='utf8')

        for line in newList:
            if "품절" not in line:
                f.write(line+"\n")

        f.close()

        logger.info("getMarket end")

    except Exception as ex:
        logger.error("getMarket error", ex)

def getUpdate(configParam, configId, logger, now1):

    try:

        updateId = configId['DEFAULT']['updateId']
        updateIdInt = int(updateId)

        bot = telegram.Bot(token = my_token)
        updates = bot.getUpdates(offset=updateId)
        isChanged = False
        for u in updates:
            if u.update_id > updateIdInt:
                configId['DEFAULT']['updateId'] = str(u.update_id)
                #text 비교
                try :
                    message = u.message.text
                    if message is None:
                        continue 
                except Exception as ex:
                    logger.error("update error",ex)
                    continue 

                mlist = message.split('/')

                if len(mlist) == 2 and mlist[0] == 'help':
                    #현재 조건
#                    message = '''upd/mxdt/yyyyMMdd
#upd/megat/제목
#upd/megatdt/yyyyMMdd
#updcgv/movie_number/yyyyMMdd
#updmega/제목/yyyyMMdd
#updmarket/제목/yyyyMMdd
#updememdt/yyyyMMdd
#updemejoindt/yyyyMMdd
#upd/4dx/yyyyMMdd
#upda/제목/yyyyMMdd
#upd/imaxdt/yyyyMMdd
#upd/cgvt/제목
#upd/cgvtdt/yyyyMMdd
#:wqupdcgv/제목/yyyyMMdd'''
                    message = [
			'upd/mxdt/yyyyMMdd',
			'upd/megat/제목',
			'upd/megatdt/yyyyMMdd',
			'updcgv/movie_number/yyyyMMdd',
			'updmega/제목/yyyyMMdd',
			'updmarket/제목/yyyyMMdd',
			'updememdt/yyyyMMdd[,yyyyMMdd]',
			'updemejoindt/yyyyMMdd',
			'upd/4dx/yyyyMMdd'
			]
                    for meg in message:
                        telegram_send(meg, logger)

                elif len(mlist) == 3 and mlist[0] == 'updcgv':
                    configParam['DEFAULT']['movienum'] = mlist[1]
                    configParam['DEFAULT']['cgvtdt'] = mlist[2]
                    isChanged = True
                elif len(mlist) == 2 and mlist[0] == 'updememdt':
                    configParam['DEFAULT']['ememdt'] = mlist[1]
                    isChanged = True
                elif len(mlist) == 2 and mlist[0] == 'updemejoindt':
                    configParam['DEFAULT']['emejoindt'] = mlist[1]
                    isChanged = True

                #수집 대상 항목 변경
                elif len(mlist) == 3 and mlist[0] == 'upd':
                    if mlist[1] in configParam['DEFAULT']:
                        configParam['DEFAULT'][mlist[1]] = mlist[2]
                        isChanged = True
                    else:
                        telegram_send('no key found : '+mlist[1], logger)

                elif len(mlist) == 3 and mlist[0] == 'upda':
                    configParam['DEFAULT']['cgvt'] = mlist[1]
                    configParam['DEFAULT']['megat'] = mlist[1]
                    configParam['DEFAULT']['cgvtdt'] = mlist[2]
                    configParam['DEFAULT']['megatdt'] = mlist[2]
                    configParam['DEFAULT']['mxdt'] = mlist[2]
                    configParam['DEFAULT']['imaxdt'] = mlist[2]
                    isChanged = True

                elif len(mlist) == 3 and mlist[0] == 'updcgva':
                    configParam['DEFAULT']['cgvt'] = mlist[1]
                    configParam['DEFAULT']['cgvtdt'] = mlist[2]
                    configParam['DEFAULT']['imaxdt'] = mlist[2]
                    isChanged = True

                elif len(mlist) == 3 and mlist[0] == 'updmega':
                    configParam['DEFAULT']['megat'] = mlist[1]
                    configParam['DEFAULT']['megatdt'] = mlist[2]
                    configParam['DEFAULT']['mxdt'] = mlist[2]
                    isChanged = True

                elif len(mlist) == 3 and mlist[0] == 'updmarket':
                    configParam['DEFAULT']['markett'] = mlist[1]
                    configParam['DEFAULT']['marketdt'] = mlist[2]
                    isChanged = True

                elif len(mlist) == 2 and mlist[0] == 'list':
                    message = 'megat:'+configParam['DEFAULT']['megat']+'\n\rmegatdt:'+configParam['DEFAULT']['megatdt']+'\n\rmxdt:'+configParam['DEFAULT']['mxdt']+'\n\rcgv4dx:'+configParam['DEFAULT']['4dx']+'\n\rcgvmovnum:'+configParam['DEFAULT']['movienum']+'\n\rcgvtdt:'+configParam['DEFAULT']['cgvtdt']+'\n\rmarkett:'+configParam['DEFAULT']['markett']+'\n\rmarketdt:'+configParam['DEFAULT']['marketdt']+'\n\rememdt:'+configParam['DEFAULT']['ememdt']+'\n\remejoindt:'+configParam['DEFAULT']['emejoindt']
                    telegram_send(message, logger)

        if updateId != configId['DEFAULT']['updateId']:
            with open(confIdFile,'w',encoding='utf-8') as f:
                configId.write(f)
        if isChanged:
            with open(confParamFile,'w',encoding='utf-8') as f:
                configParam.write(f)
            message = 'megat:'+configParam['DEFAULT']['megat']+'\n\rmegatdt:'+configParam['DEFAULT']['megatdt']+'\n\rmxdt:'+configParam['DEFAULT']['mxdt']+'\n\rcgv4dx:'+configParam['DEFAULT']['4dx']+'\n\rcgvmovnum:'+configParam['DEFAULT']['movienum']+'\n\rcgvtdt:'+configParam['DEFAULT']['cgvtdt']+'\n\rmarkett:'+configParam['DEFAULT']['markett']+'\n\rmarketdt:'+configParam['DEFAULT']['marketdt']+'\n\rememdt:'+configParam['DEFAULT']['ememdt']+'\n\remejoindt:'+configParam['DEFAULT']['emejoindt']
            telegram_send(message, logger)

        logger.info("getUpdate end")
    except Exception as ex:
        logger.error("getUpdate error",ex)

def job():

    fileNameLog = config[session]['fileNameLog']

    fileNameEmerson = config[session]['fileNameEmerson']

    fileNameClub = config[session]['fileNameClub']

    fileNameMx = config[session]['fileNameMx']

    fileNameIMax = config[session]['fileNameIMax']

    fileNameCGVTitle = config[session]['fileNameCGVTitle']

    fileNameMegaBoxTitle = config[session]['fileNameMegaBoxTitle']

    fileNameGetMarket = config[session]['fileNameGetMarket']

    fileNameEmemDay = config[session]['fileNameEmemDay']

    fileNameCGVMovNum = config[session]['fileNameCGVMovNum']
    
    fileNameCGV4DX = config[session]['fileNameCGV4DX']

    # logging.basicConfig(level=logging.INFO,
    #                     format='%(asctime)s:%(message)s',
    #                     filename=fileNameLog,
    #                     filemode='w'
    #                     )
    # logger = logging.getLogger()

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s:%(message)s')
    file_handler = logging.FileHandler(fileNameLog, mode='w')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    UTC = pytz.utc
    KTC = timezone('Asia/Seoul')

    now1 = datetime.datetime.now(KTC)
    c_date = datetime.datetime(now1.year,now1.month,now1.day, tzinfo=UTC).astimezone(KTC)
    now_str = str(now1.strftime('%Y%m%d'))

    #telegram_send("테스트",logger)
    #설정 변경
    getUpdate(configParam, configId, logger, now1)

    cgvTitle = configParam['DEFAULT']['cgvt']

    cgvTitleDate = configParam['DEFAULT']['cgvtdt']

    megaTitle = configParam['DEFAULT']['megat']

    megaTitleDate = configParam['DEFAULT']['megatdt']

    mxDateStr = configParam['DEFAULT']['mxdt']

    imaxDateStr = configParam['DEFAULT']['imaxdt']

    dx4DateStr = configParam['DEFAULT']['4dx']

    mTitle = configParam['DEFAULT']['markett']

    marketDate = configParam['DEFAULT']['marketdt']

    ememdt1 = configParam['DEFAULT']['ememdt']

    emejoindt = configParam['DEFAULT']['emejoindt']
    
    movienum = configParam['DEFAULT']['movienum']

    target_date = datetime.datetime.strptime(emejoindt, '%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
        getEmerson(fileNameEmerson, logger, now1)

    URL_Megabox='https://www.megabox.co.kr/on/oh/ohc/Brch/schedulePage.do'
    data_Mx = {'masterType':'brch','brchNo':'1351','brchNm':'코엑스','firstAt':'N','playDe':str(mxDateStr),'brchNo1':'1351','crtDe':str(now_str)}
    data_Title = {'masterType':'brch','brchNo':'1351','brchNm':'코엑스','firstAt':'N','playDe':megaTitleDate,'brchNo1':'1351','crtDe':now_str}

    ememdt_arr = ememdt1.lstrip().rstrip().split(',')

    for ememdt in ememdt_arr:

        ememdtStr = ememdt[:4]+'-'+ememdt[4:6]+'-'+ememdt[-2:]

        URL_Em_Memday = 'https://joongang.ananti.kr/kr/reservation/reservation-proc.asp'
        data_Em_Memday = {'frm_flag': 'getTimeList', 'frm_RsvnDate': ememdtStr, 'frm_memNo': '11027500',
                          'frm_timezone': ''}

        target_date = datetime.datetime.strptime(ememdt, '%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
        delta = target_date - c_date
        if delta.days > 0:
            getEmersonMemDay(fileNameEmemDay, ememdt, logger, now1, URL_Em_Memday,data_Em_Memday)

    target_date = datetime.datetime.strptime(mxDateStr,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
#        logger.info(f'mxDateStr:{mxDateStr}, URL_Megabox:{URL_Megabox}, data_Mx:{data_Mx}, fileNameMx:{fileNameMx}')
        getMegaBoxMx(mxDateStr, URL_Megabox, data_Mx, fileNameMx,logger, now1)

    target_date = datetime.datetime.strptime(megaTitleDate,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
        getMegaBoxTitle(megaTitleDate, megaTitle, URL_Megabox, data_Title, fileNameMegaBoxTitle,logger, now1)

    target_date = datetime.datetime.strptime(dx4DateStr,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
        getCGV4DX(dx4DateStr, fileNameCGV4DX,logger, now1)
    
    target_date = datetime.datetime.strptime(imaxDateStr,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
        getCGVIMax(imaxDateStr, fileNameIMax,logger, now1)

    target_date = datetime.datetime.strptime(cgvTitleDate,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0:
        getCGVMovNum(cgvTitleDate, movienum, fileNameCGVMovNum,logger, now1)

    target_date = datetime.datetime.strptime(marketDate,'%Y%m%d').replace(tzinfo=UTC).astimezone(KTC)
    delta = target_date - c_date
    if delta.days > 0 and len(mTitle)>0:
        getMarket(fileNameGetMarket,mTitle, logger, now1)

    logger.handlers.clear()

if __name__ == '__main__':

    # nowhour = (datetime.datetime.now().hour+9) % 24
    nowhour = datetime.datetime.now(timezone('Asia/Seoul')).hour
    #print(nowhour)
    if nowhour >= 22 or nowhour <= 6:
         sys.exit(1)

    session = 'SERVER'  # SERVER, LOCAL

    # SERVER
    confFile = '/root/searchInfo/config.ini'
    confParamFile = '/root/searchInfo/config_param.ini'
    confIdFile = '/root/searchInfo/config_id.ini'

    # LOCAL
    if session == 'LOCAL':
        confFile = "C:\\Users\\leeps\\PycharmProjects\\searchInfo\\config.ini"
        confParamFile = "C:\\Users\\leeps\\PycharmProjects\\searchInfo\\config_param.ini"
        confIdFile = "C:\\Users\\leeps\\PycharmProjects\\searchInfo\\config_id.ini"

    if len(sys.argv) > 2 and sys.argv[1]:
        confFile = sys.argv[1]

    if len(sys.argv) > 3 and sys.argv[2]:
        confParamFile = sys.argv[2]

    config = configparser.ConfigParser()
    config.read(confFile, encoding='utf-8')

    configParam = configparser.ConfigParser()
    configParam.read(confParamFile, encoding='utf-8')

    configId = configparser.ConfigParser()
    configId.read(confIdFile, encoding='utf-8')

    LOGIN_INFO = {
        'next_url': '',
        'SSL_Login': 1,
        'user_id': 'leeps',
        'user_pass': '',
        'x': 44,
        'y': 28
    }

    permitDays = {'토','일','금'}
    #permitDays = {'수','목','월','화','금','토','일'}

    #arrange_time = {'06:'}
    arrange_time = {'06:','07:', '08:','09:','11:'}

    my_token = config['DEFAULT']['my_token']

    my_id = config['DEFAULT']['my_id']

    job()
    
    sys.exit(0)

    #sched = BlockingScheduler()
    #sched.add_job(job, 'cron', minute="*/5", hour="7-22")
    #sched.start()
